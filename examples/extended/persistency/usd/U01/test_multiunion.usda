#usda 1.0

def Logical "wl"
{
    string[] daughters = ["m_pv1"]
    string solidprim = "ws"

    def Box "ws"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
        point3f[] points = [(-50, -50, -50), (-50, 50, -50), (50, 50, -50), (50, -50, -50), (-50, -50, 50), (-50, 50, 50), (50, 50, 50), (50, -50, 50)]
        double x = 50
        double y = 50
        double z = 50
    }

    def Placement "m_pv1"
    {
        float3 xformOp:rotateZYX = (0, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

        def Logical "ml"
        {
            string[] daughters = []
            string solidprim = "mu_multi"

            def MultiUnion "mu_multi"
            {
                string solid3prim = "result"
                string[] solidprims = ["bs_displaced_0", "bs_displaced_1", "bs_displaced_2", "bs_displaced_3", "bs_displaced_4", "bs_displaced_5", "bs_displaced_6", "bs_displaced_7", "bs_displaced_8", "bs_displaced_9", "bs_displaced_10", "bs_displaced_11", "bs_displaced_12", "bs_displaced_13", "bs_displaced_14"]

                def DisplacedSolid "bs_displaced_0"
                {
                    double3 rotation = (0, 114.31803635447432, 159.6676117103454)
                    double3 translation = (-15.734367737572807, 5.830432888413498, -7.582765001907052)
                    float3 xformOp:rotateZYX = (0, 114.31804, 159.66762)
                    double3 xformOp:translate = (-15.734367737572807, 5.830432888413498, -7.582765001907052)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_1"
                {
                    double3 rotation = (0, 160.6832721512735, 290.9268450012901)
                    double3 translation = (1.906669736793571, -4.986063394857942, -15.229208081654402)
                    float3 xformOp:rotateZYX = (0, 160.68327, 290.92685)
                    double3 xformOp:translate = (1.906669736793571, -4.986063394857942, -15.229208081654402)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_2"
                {
                    double3 rotation = (0, 15.111794169069304, 49.87228866354548)
                    double3 translation = (0.8565745306924238, 1.016216998620989, 4.921709878790846)
                    float3 xformOp:rotateZYX = (0, 15.111794, 49.872288)
                    double3 xformOp:translate = (0.8565745306924238, 1.016216998620989, 4.921709878790846)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_3"
                {
                    double3 rotation = (0, 6.864707197136249, 133.11166311198846)
                    double3 translation = (-0.705325122911159, 0.753419396184076, 8.57266193574776)
                    float3 xformOp:rotateZYX = (0, 6.864707, 133.11166)
                    double3 xformOp:translate = (-0.705325122911159, 0.753419396184076, 8.57266193574776)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_4"
                {
                    double3 rotation = (0, 54.67754194044171, 106.71362662953186)
                    double3 translation = (-4.511786940716831, 15.025584837115094, 11.117207783008999)
                    float3 xformOp:rotateZYX = (0, 54.677544, 106.71362)
                    double3 xformOp:translate = (-4.511786940716831, 15.025584837115094, 11.117207783008999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_5"
                {
                    double3 rotation = (0, 16.539769431744155, 125.70755168092255)
                    double3 translation = (-2.791593111300565, 3.883832584653253, 16.106097261369335)
                    float3 xformOp:rotateZYX = (0, 16.53977, 125.70755)
                    double3 xformOp:translate = (-2.791593111300565, 3.883832584653253, 16.106097261369335)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_6"
                {
                    double3 rotation = (0, 114.5074191944192, 152.51657354959693)
                    double3 translation = (-13.768373766562055, 7.162300536300482, -7.075243832591481)
                    float3 xformOp:rotateZYX = (0, 114.507416, 152.51657)
                    double3 xformOp:translate = (-13.768373766562055, 7.162300536300482, -7.075243832591481)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_7"
                {
                    double3 rotation = (0, 32.821505265130696, 295.2307137705827)
                    double3 translation = (4.175433387309583, -8.86091519015969, 15.186979806422002)
                    float3 xformOp:rotateZYX = (0, 32.821507, 295.2307)
                    double3 xformOp:translate = (4.175433387309583, -8.86091519015969, 15.186979806422002)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_8"
                {
                    double3 rotation = (0, 145.94881006248653, 7.626431112723565)
                    double3 translation = (10.643903424952185, 1.425197796828932, -15.890424331455716)
                    float3 xformOp:rotateZYX = (0, 145.9488, 7.626431)
                    double3 xformOp:translate = (10.643903424952185, 1.425197796828932, -15.890424331455716)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_9"
                {
                    double3 rotation = (0, 148.04397820782359, 274.3174499790339)
                    double3 translation = (0.18288031794074, -2.422362830360651, -3.8942711537849766)
                    float3 xformOp:rotateZYX = (0, 148.04398, 274.31744)
                    double3 xformOp:translate = (0.18288031794074, -2.422362830360651, -3.8942711537849766)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_10"
                {
                    double3 rotation = (0, 147.95505249272554, 282.3438743074942)
                    double3 translation = (0.675744357403464, -3.087881218370586, -5.049767168611475)
                    float3 xformOp:rotateZYX = (0, 147.95505, 282.34387)
                    double3 xformOp:translate = (0.675744357403464, -3.087881218370586, -5.049767168611475)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_11"
                {
                    double3 rotation = (0, 21.188982291105983, 38.15157164433891)
                    double3 translation = (3.517176580127061, 2.76293448841746, 11.53768525707958)
                    float3 xformOp:rotateZYX = (0, 21.188982, 38.151573)
                    double3 xformOp:translate = (3.517176580127061, 2.76293448841746, 11.53768525707958)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_12"
                {
                    double3 rotation = (0, 114.08535437942417, 139.45761249384617)
                    double3 translation = (-8.442503598268132, 7.221387874850916, -4.966178709915504)
                    float3 xformOp:rotateZYX = (0, 114.08536, 139.45761)
                    double3 xformOp:translate = (-8.442503598268132, 7.221387874850916, -4.966178709915504)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_13"
                {
                    double3 rotation = (0, 29.940982002929257, 134.81441188194836)
                    double3 translation = (-1.184901732290781, 1.192602790500309, 2.918790894188322)
                    float3 xformOp:rotateZYX = (0, 29.940983, 134.8144)
                    double3 xformOp:translate = (-1.184901732290781, 1.192602790500309, 2.918790894188322)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def DisplacedSolid "bs_displaced_14"
                {
                    double3 rotation = (0, 12.438107323433911, 89.55257561151029)
                    double3 translation = (0.010128955809304, 1.297056300329468, 5.880877658078222)
                    float3 xformOp:rotateZYX = (0, 12.4381075, 89.552574)
                    double3 xformOp:translate = (0.010128955809304, 1.297056300329468, 5.880877658078222)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]

                    def Box "bs"
                    {
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 3, 6, 7, 3, 2, 6, 0, 3, 7, 0, 7, 4, 4, 6, 5, 4, 7, 6]
                        point3f[] points = [(-5, -5, -5), (-5, 5, -5), (5, 5, -5), (5, -5, -5), (-5, -5, 5), (-5, 5, 5), (5, 5, 5), (5, -5, 5)]
                        double x = 5
                        double y = 5
                        double z = 5
                    }
                }

                def Mesh "result"
                {
                    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                    int[] faceVertexIndices = [139, 115, 141, 113, 115, 139, 134, 115, 114, 141, 115, 134, 134, 116, 112, 130, 117, 113, 124, 123, 114, 114, 122, 134, 115, 113, 117, 139, 138, 150, 113, 139, 131, 129, 113, 131, 131, 139, 150, 122, 114, 123, 129, 130, 113, 126, 115, 117, 114, 115, 124, 126, 120, 115, 124, 115, 120, 121, 134, 122, 137, 136, 116, 137, 134, 121, 128, 126, 117, 155, 121, 153, 142, 145, 146, 147, 118, 148, 146, 128, 143, 153, 128, 146, 144, 119, 153, 128, 124, 120, 137, 121, 155, 122, 153, 121, 128, 153, 123, 123, 153, 122, 124, 128, 123, 132, 125, 137, 148, 131, 150, 120, 126, 128, 150, 133, 127, 117, 143, 128, 129, 143, 130, 129, 148, 143, 131, 148, 129, 143, 117, 130, 132, 155, 151, 137, 155, 132, 150, 149, 133, 134, 112, 141, 150, 127, 148, 135, 148, 127, 137, 125, 136, 137, 116, 134, 140, 138, 139, 141, 140, 139, 141, 112, 140, 142, 143, 118, 146, 143, 142, 153, 146, 144, 145, 144, 146, 143, 148, 118, 135, 147, 148, 138, 149, 150, 154, 151, 155, 153, 152, 155, 153, 119, 152, 152, 154, 155, 157, 180, 156, 183, 184, 158, 170, 189, 169, 157, 189, 170, 164, 179, 170, 170, 179, 157, 164, 183, 179, 167, 159, 170, 159, 160, 164, 164, 170, 159, 161, 169, 166, 183, 162, 186, 168, 169, 161, 163, 162, 183, 164, 163, 183, 164, 160, 163, 165, 189, 186, 169, 189, 165, 166, 169, 165, 167, 169, 168, 169, 167, 170, 175, 174, 171, 172, 174, 173, 171, 174, 172, 177, 171, 172, 175, 171, 177, 168, 161, 177, 177, 161, 175, 173, 174, 176, 172, 173, 177, 177, 173, 176, 166, 165, 175, 161, 166, 175, 159, 167, 176, 160, 159, 176, 174, 160, 176, 174, 163, 160, 162, 163, 174, 175, 162, 174, 175, 165, 186, 162, 175, 186, 168, 176, 167, 176, 168, 177, 158, 179, 183, 178, 179, 158, 157, 179, 178, 157, 181, 180, 157, 178, 181, 183, 185, 182, 156, 188, 189, 184, 183, 182, 157, 156, 189, 185, 186, 187, 183, 186, 185, 189, 187, 186, 189, 188, 187, 328, 353, 350, 384, 283, 318, 369, 370, 298, 318, 333, 384, 408, 190, 407, 407, 190, 398, 404, 102, 101, 245, 191, 318, 216, 399, 318, 296, 349, 297, 407, 99, 98, 415, 277, 257, 274, 192, 275, 299, 355, 413, 299, 413, 275, 354, 383, 413, 389, 277, 415, 408, 98, 414, 194, 196, 197, 193, 196, 194, 200, 205, 196, 196, 205, 405, 202, 204, 199, 194, 197, 199, 195, 193, 199, 199, 193, 194, 195, 196, 193, 198, 196, 195, 199, 198, 195, 196, 198, 200, 209, 200, 198, 199, 197, 206, 206, 202, 199, 405, 206, 197, 196, 405, 197, 199, 210, 198, 198, 210, 209, 199, 204, 210, 205, 200, 413, 286, 201, 285, 207, 212, 287, 208, 212, 207, 204, 202, 207, 207, 202, 206, 287, 285, 207, 207, 285, 264, 263, 203, 264, 207, 264, 204, 210, 204, 264, 408, 414, 212, 208, 406, 398, 190, 408, 212, 208, 190, 212, 208, 398, 190, 413, 64, 65, 405, 406, 208, 405, 205, 413, 206, 405, 208, 207, 206, 208, 264, 203, 275, 209, 275, 200, 200, 275, 413, 209, 264, 275, 210, 264, 209, 415, 212, 414, 250, 211, 415, 212, 415, 287, 255, 216, 318, 255, 191, 269, 386, 318, 399, 257, 248, 415, 389, 92, 91, 414, 94, 93, 216, 255, 410, 213, 279, 410, 281, 279, 215, 277, 389, 279, 214, 213, 411, 411, 213, 410, 214, 279, 213, 215, 279, 214, 281, 215, 411, 411, 215, 214, 424, 425, 411, 412, 279, 389, 399, 216, 410, 410, 255, 269, 279, 399, 410, 279, 412, 399, 384, 363, 298, 380, 381, 394, 394, 393, 326, 370, 364, 317, 259, 227, 267, 384, 221, 402, 384, 298, 221, 316, 361, 360, 289, 217, 329, 229, 218, 401, 316, 237, 219, 231, 220, 327, 327, 326, 232, 339, 338, 329, 317, 315, 298, 221, 298, 315, 315, 317, 320, 392, 397, 316, 320, 365, 315, 402, 221, 315, 401, 402, 315, 327, 307, 304, 235, 222, 326, 232, 326, 222, 223, 401, 224, 316, 219, 315, 224, 401, 234, 232, 222, 225, 329, 322, 289, 220, 289, 327, 393, 259, 226, 430, 401, 223, 430, 11, 12, 268, 227, 259, 266, 423, 429, 423, 6, 7, 228, 315, 219, 401, 315, 228, 228, 229, 401, 230, 232, 233, 231, 232, 230, 327, 232, 231, 225, 233, 232, 234, 401, 218, 393, 236, 326, 326, 236, 235, 393, 226, 236, 239, 237, 316, 329, 238, 316, 329, 217, 238, 238, 239, 316, 242, 230, 233, 220, 156, 289, 289, 156, 180, 178, 158, 241, 240, 181, 178, 229, 228, 241, 223, 259, 430, 184, 182, 243, 230, 242, 231, 244, 241, 158, 240, 178, 241, 238, 240, 239, 243, 244, 184, 158, 184, 244, 240, 238, 217, 289, 240, 217, 240, 180, 181, 240, 289, 180, 237, 241, 219, 228, 219, 241, 240, 237, 239, 240, 241, 237, 241, 244, 229, 9, 10, 430, 185, 187, 242, 243, 185, 242, 243, 182, 185, 235, 236, 222, 225, 222, 243, 242, 233, 243, 233, 225, 243, 222, 236, 243, 188, 231, 242, 187, 188, 242, 188, 156, 220, 220, 231, 188, 259, 223, 224, 226, 234, 243, 244, 243, 234, 226, 224, 234, 226, 243, 236, 429, 430, 267, 267, 430, 259, 218, 244, 234, 229, 244, 218, 259, 224, 226, 299, 275, 192, 283, 245, 318, 246, 269, 249, 247, 285, 252, 257, 253, 248, 269, 262, 249, 248, 250, 415, 299, 271, 251, 252, 285, 201, 416, 1, 2, 253, 257, 256, 281, 272, 254, 411, 32, 424, 31, 32, 411, 255, 318, 191, 256, 257, 276, 257, 277, 276, 258, 281, 254, 259, 393, 268, 350, 349, 295, 260, 281, 425, 319, 299, 261, 357, 358, 319, 319, 358, 355, 281, 411, 425, 261, 299, 265, 191, 262, 269, 263, 285, 247, 285, 263, 264, 299, 251, 265, 227, 266, 267, 287, 415, 211, 268, 393, 382, 395, 269, 246, 26, 27, 395, 410, 269, 395, 270, 299, 284, 271, 299, 270, 5, 6, 423, 281, 273, 272, 281, 260, 273, 203, 274, 275, 429, 267, 266, 276, 277, 280, 277, 279, 280, 281, 258, 278, 281, 280, 279, 281, 278, 280, 282, 384, 387, 283, 384, 282, 22, 23, 387, 284, 299, 192, 390, 54, 55, 285, 287, 286, 288, 286, 287, 288, 287, 211, 297, 319, 295, 249, 282, 395, 271, 270, 419, 400, 420, 419, 201, 286, 278, 272, 273, 419, 41, 42, 420, 418, 328, 319, 328, 295, 319, 296, 297, 295, 400, 419, 273, 254, 272, 419, 278, 258, 419, 258, 254, 419, 400, 268, 420, 420, 268, 382, 400, 388, 423, 400, 416, 385, 400, 39, 416, 400, 385, 388, 400, 266, 227, 400, 423, 266, 400, 227, 268, 419, 418, 251, 265, 251, 418, 251, 271, 419, 319, 261, 418, 261, 265, 418, 280, 278, 286, 252, 278, 419, 263, 247, 419, 419, 247, 252, 252, 201, 278, 262, 283, 249, 395, 246, 249, 283, 282, 249, 191, 245, 283, 191, 283, 262, 286, 288, 256, 288, 248, 256, 286, 276, 280, 211, 248, 288, 286, 256, 276, 248, 253, 256, 250, 248, 211, 284, 419, 270, 203, 192, 274, 203, 419, 284, 192, 203, 284, 263, 419, 203, 260, 400, 273, 387, 395, 282, 387, 25, 26, 425, 400, 260, 35, 36, 424, 36, 37, 425, 294, 289, 322, 327, 289, 294, 307, 327, 294, 304, 335, 337, 329, 334, 322, 322, 336, 304, 138, 140, 310, 118, 147, 313, 293, 154, 306, 293, 294, 322, 323, 314, 290, 119, 144, 306, 307, 308, 304, 305, 306, 324, 154, 152, 306, 324, 306, 144, 152, 119, 306, 151, 154, 293, 136, 125, 132, 310, 140, 112, 151, 293, 116, 310, 116, 293, 310, 112, 116, 116, 136, 132, 151, 116, 132, 322, 310, 293, 304, 301, 291, 313, 323, 118, 142, 118, 323, 305, 300, 292, 293, 306, 307, 294, 293, 307, 135, 313, 147, 133, 149, 127, 138, 313, 135, 138, 310, 313, 127, 138, 135, 127, 149, 138, 145, 142, 323, 324, 145, 323, 324, 144, 145, 320, 366, 367, 296, 295, 349, 349, 356, 297, 297, 356, 357, 304, 337, 327, 377, 394, 374, 336, 335, 304, 393, 60, 382, 334, 336, 322, 394, 381, 376, 394, 326, 380, 345, 380, 326, 407, 341, 342, 426, 341, 407, 398, 426, 407, 398, 73, 426, 316, 360, 329, 363, 369, 298, 407, 342, 340, 317, 298, 370, 319, 355, 299, 328, 350, 295, 328, 359, 353, 379, 372, 394, 305, 302, 300, 308, 301, 304, 305, 303, 302, 304, 291, 322, 334, 329, 338, 316, 396, 392, 367, 365, 320, 394, 377, 379, 417, 47, 409, 418, 417, 347, 46, 47, 417, 292, 306, 305, 307, 306, 292, 308, 307, 292, 355, 354, 413, 305, 312, 309, 427, 403, 313, 310, 427, 313, 310, 321, 427, 316, 422, 361, 316, 397, 422, 327, 337, 330, 311, 313, 403, 323, 313, 314, 312, 305, 325, 314, 313, 311, 394, 375, 374, 83, 111, 428, 394, 372, 373, 351, 359, 328, 343, 315, 365, 316, 343, 396, 316, 315, 343, 320, 317, 364, 331, 386, 344, 318, 331, 333, 318, 386, 331, 319, 297, 357, 366, 320, 364, 321, 322, 291, 310, 322, 321, 303, 305, 309, 290, 324, 323, 305, 324, 325, 325, 324, 290, 346, 345, 326, 327, 371, 326, 326, 371, 346, 327, 330, 371, 328, 352, 351, 418, 347, 378, 418, 352, 328, 418, 378, 352, 394, 373, 348, 390, 394, 348, 386, 428, 344, 375, 394, 376, 404, 407, 340, 329, 360, 339, 368, 363, 384, 333, 332, 384, 332, 368, 384, 361, 422, 421, 330, 308, 371, 333, 331, 362, 332, 362, 368, 362, 332, 333, 427, 76, 77, 426, 427, 421, 79, 80, 403, 321, 336, 334, 427, 338, 421, 308, 330, 301, 336, 291, 301, 338, 427, 321, 301, 337, 335, 336, 301, 335, 308, 292, 371, 301, 330, 337, 336, 321, 291, 334, 338, 321, 339, 421, 338, 103, 102, 404, 340, 421, 404, 342, 341, 421, 426, 421, 341, 340, 342, 421, 109, 108, 392, 108, 107, 397, 396, 343, 428, 344, 343, 362, 428, 111, 110, 331, 344, 362, 428, 343, 344, 110, 109, 396, 347, 417, 348, 380, 345, 346, 378, 347, 348, 53, 54, 390, 348, 417, 390, 350, 356, 349, 359, 351, 352, 311, 80, 391, 356, 350, 353, 354, 311, 383, 355, 311, 354, 356, 353, 357, 352, 355, 359, 311, 391, 383, 355, 314, 311, 290, 355, 352, 290, 314, 355, 359, 358, 357, 359, 355, 358, 359, 357, 353, 421, 339, 360, 361, 421, 360, 49, 50, 409, 369, 362, 343, 363, 362, 369, 366, 364, 365, 369, 343, 365, 367, 366, 365, 368, 362, 363, 369, 365, 370, 370, 365, 364, 378, 348, 373, 292, 380, 371, 380, 346, 371, 378, 373, 372, 292, 300, 380, 374, 325, 377, 312, 374, 375, 325, 290, 377, 381, 303, 309, 376, 312, 375, 290, 379, 377, 372, 352, 378, 290, 372, 379, 290, 352, 372, 312, 325, 374, 381, 302, 303, 381, 380, 300, 302, 381, 300, 376, 309, 312, 376, 381, 309, 41, 382, 40, 60, 40, 382, 62, 383, 61, 383, 391, 61, 70, 406, 69, 409, 48, 49, 51, 417, 50, 386, 87, 86, 98, 97, 414, 22, 384, 21, 24, 387, 23, 387, 384, 22, 19, 384, 18, 384, 402, 18, 3, 385, 2, 83, 386, 84, 387, 26, 395, 45, 46, 418, 43, 420, 42, 420, 382, 41, 424, 33, 34, 4, 388, 3, 388, 385, 3, 18, 402, 17, 73, 74, 426, 77, 78, 403, 427, 77, 403, 414, 95, 94, 389, 91, 412, 390, 55, 394, 5, 388, 4, 402, 15, 16, 17, 402, 16, 390, 417, 53, 21, 384, 20, 416, 0, 1, 15, 402, 14, 430, 10, 11, 30, 410, 29, 72, 73, 398, 82, 391, 81, 32, 33, 424, 80, 81, 391, 397, 392, 108, 417, 52, 53, 56, 394, 55, 393, 58, 59, 393, 394, 58, 57, 394, 56, 58, 394, 57, 28, 410, 27, 410, 395, 27, 392, 396, 109, 404, 101, 407, 422, 397, 107, 417, 409, 50, 428, 386, 83, 422, 107, 106, 71, 406, 70, 398, 406, 71, 61, 391, 82, 72, 398, 71, 387, 24, 25, 414, 97, 96, 399, 87, 386, 399, 88, 87, 399, 89, 88, 400, 38, 39, 400, 37, 38, 417, 51, 52, 12, 13, 430, 13, 401, 430, 14, 402, 13, 402, 401, 13, 60, 393, 59, 39, 0, 416, 311, 403, 80, 78, 79, 403, 423, 388, 5, 100, 99, 407, 85, 84, 386, 100, 407, 101, 404, 421, 103, 65, 405, 413, 66, 405, 65, 67, 406, 66, 406, 405, 66, 68, 406, 67, 410, 28, 29, 386, 86, 85, 407, 98, 408, 47, 48, 409, 31, 410, 30, 410, 31, 411, 90, 412, 91, 399, 412, 89, 95, 414, 96, 89, 412, 90, 63, 413, 62, 413, 383, 62, 69, 406, 68, 64, 413, 63, 93, 415, 414, 389, 415, 92, 92, 415, 93, 384, 19, 20, 416, 2, 385, 417, 418, 46, 45, 418, 44, 418, 419, 44, 420, 44, 419, 420, 43, 44, 104, 103, 421, 422, 104, 421, 422, 105, 104, 422, 106, 105, 7, 8, 429, 423, 7, 429, 425, 424, 36, 34, 35, 424, 400, 425, 37, 75, 426, 74, 427, 75, 76, 427, 426, 75, 428, 110, 396, 9, 429, 8, 429, 9, 430, 22, 27, 23, 431, 7, 6, 432, 38, 37, 35, 432, 36, 36, 432, 37, 12, 431, 13, 10, 9, 431, 11, 431, 12, 11, 10, 431, 34, 31, 35, 31, 432, 35, 34, 33, 32, 32, 31, 34, 431, 16, 14, 14, 16, 15, 13, 431, 14, 30, 29, 20, 431, 432, 18, 21, 28, 22, 20, 31, 30, 28, 20, 29, 23, 27, 24, 24, 27, 25, 28, 27, 22, 432, 19, 18, 431, 17, 16, 431, 18, 17, 432, 20, 19, 432, 31, 20, 25, 27, 26, 21, 20, 28, 9, 7, 431, 9, 8, 7, 1, 38, 432, 431, 5, 4, 432, 431, 3, 432, 3, 2, 431, 4, 3, 2, 1, 432, 431, 6, 5, 1, 39, 38, 1, 0, 39, 70, 67, 71, 63, 66, 65, 76, 75, 433, 77, 76, 433, 433, 79, 78, 77, 433, 78, 74, 433, 75, 67, 66, 71, 74, 73, 433, 66, 72, 71, 66, 73, 72, 66, 433, 73, 70, 69, 67, 69, 68, 67, 64, 63, 65, 80, 79, 433, 62, 66, 63, 62, 433, 66, 82, 433, 61, 61, 433, 62, 81, 433, 82, 80, 433, 81, 60, 59, 43, 58, 57, 434, 54, 45, 55, 47, 46, 51, 434, 45, 44, 434, 56, 45, 50, 47, 51, 49, 47, 50, 48, 47, 49, 46, 52, 51, 45, 56, 55, 52, 45, 53, 54, 53, 45, 46, 45, 52, 57, 56, 434, 43, 434, 44, 42, 41, 40, 42, 60, 43, 60, 42, 40, 434, 43, 59, 434, 59, 58, 435, 104, 105, 92, 93, 436, 90, 91, 436, 91, 92, 436, 435, 86, 436, 436, 87, 88, 111, 83, 110, 436, 86, 87, 84, 110, 83, 85, 110, 84, 435, 85, 86, 435, 109, 85, 85, 109, 110, 435, 108, 109, 435, 107, 108, 435, 106, 107, 435, 105, 106, 103, 104, 435, 103, 435, 100, 101, 103, 100, 102, 103, 101, 94, 436, 93, 98, 436, 97, 96, 436, 95, 98, 435, 436, 99, 435, 98, 100, 435, 99, 97, 436, 96, 95, 436, 94, 89, 436, 88, 89, 90, 436]
                    point3f[] points = [(5.749976, -1.1767375, 8.7793865), (5.7411885, -2.3411148, 8.781759), (5.67872, -2.324882, 8.497947), (4.703161, -2.071376, 4.065687), (4.6846766, -2.066573, 3.981707), (4.2620387, -1.9567474, 2.0615346), (4.251296, -1.9539559, 2.0127275), (4.1804094, -1.9355357, 1.6906703), (3.8255076, -1.8433119, 0.07824275), (3.7881594, -2.353665, -0.07258522), (3.6584928, -2.7865672, -0.04398574), (3.607518, -3.2806187, -0.032742646), (3.5810244, -3.5373945, -0.026899213), (3.5601103, -3.7400968, -0.022286335), (2.9254253, -3.7335439, 0.99609375), (2.5770829, -3.7299473, 1.5550247), (2.625379, -3.7300143, 1.7340891), (2.7829282, -3.7302334, 2.3182232), (2.787639, -3.7302399, 2.3356886), (4.561855, -3.7327056, 8.913817), (4.608719, -3.7327707, 9.087573), (4.031529, -3.728107, 9.243439), (3.712602, -3.72553, 9.329562), (2.6108994, -3.716628, 9.627068), (2.614469, -3.7166398, 9.636317), (2.6246867, -3.7166731, 9.662792), (2.8022423, -3.7172534, 10.122863), (3.440382, -3.722812, 9.71127), (4.0778, -3.7283645, 9.300144), (4.1127276, -3.72854, 9.354144), (4.388211, -3.7299244, 9.780055), (4.532759, -3.730651, 10.003533), (4.0858097, -2.820178, 10.102113), (4.0685225, -2.7849627, 10.1059265), (4.205202, -2.6762927, 10.07578), (4.602969, -2.3600395, 9.988048), (4.634705, -2.3348074, 9.981048), (5.3770537, -1.7445874, 9.817314), (5.9501276, -1.288953, 9.690916), (5.884333, -1.2520651, 9.391274), (5.0432677, 4.2489376, 5.3785353), (5.0849795, 4.256492, 5.5673776), (5.086458, 4.457194, 5.5668044), (5.0995126, 6.229173, 5.561744), (5.131947, 6.257859, 5.7077584), (5.078372, 6.2580357, 5.569939), (3.0070946, 6.275182, 6.3728766), (2.916134, 6.2759347, 6.408138), (2.8377943, 6.276583, 6.4385066), (2.8222013, 6.276605, 6.380863), (2.888776, 6.276033, 6.3425174), (2.9202397, 6.2757626, 6.324395), (3.0428376, 6.2747087, 6.2537813), (2.9329998, 6.2752275, 6.064116), (2.5642896, 6.276968, 5.427435), (2.2431216, 6.2774205, 4.2401648), (1.9001703, 6.2779036, 2.9723673), (1.2291615, 6.278848, 0.4918316), (3.8368442, 4.03044, -0.08332312), (4.4804587, 4.147006, 2.8305218), (4.6497645, 4.1776695, 3.5970235), (-2.3421283, 6.3161426, 6.472858), (-2.3306355, 6.316214, 6.56768), (-2.02196, 6.318144, 9.114434), (-1.8409388, 6.3192754, 10.6079645), (-3.241224, 6.330653, 11.023806), (-3.8928895, 6.3359485, 11.217329), (-3.897611, 5.70687, 11.218732), (-3.9079492, 4.3293986, 11.221802), (-4.0402865, 4.273307, 10.623833), (-4.042976, 4.272167, 10.611682), (-4.2358017, 4.1904373, 9.7403965), (-4.317238, 4.1559205, 9.372427), (-4.7688675, 3.9644957, 7.3317323), (-5.32195, 3.7300699, 4.8326216), (-5.9245443, 4.581378, 2.0696645), (-5.3939004, 5.096271, 1.9526247), (-5.044906, 5.434906, 1.87565), (-4.2037315, 6.2511125, 1.6901193), (-4.130972, 6.3217125, 1.6740713), (-3.9792423, 6.3210006, 1.938936), (-2.5997963, 6.3145313, 4.3469462), (-2.404409, 6.315753, 5.9590063), (-3.5027206, -3.6796842, 3.8733325), (-3.526305, -3.6794994, 3.8761718), (-3.9861004, -3.6759, 3.931526), (-3.5563169, -3.6731365, 7.523148), (-3.4046113, -3.672161, 8.790923), (-3.1641405, -3.6706147, 10.800492), (-3.0628703, -3.6699636, 11.6467905), (-3.059134, -3.6699395, 11.678014), (-3.5447028, -3.1413057, 11.785111), (-3.57962, -3.1032917, 11.792812), (-3.8272426, -2.8337073, 11.847428), (-3.8779953, -2.8093743, 11.616441), (-3.8820863, -2.8074126, 11.59782), (-3.915438, -2.7914226, 11.446029), (-4.086129, -2.7095854, 10.6691675), (-4.4147935, -2.5520089, 9.17333), (-5.525791, -2.0193465, 4.1168866), (-5.522356, -1.5784162, 4.116473), (-5.522128, -1.5491396, 4.1164455), (-5.5218797, -1.5172619, 4.116416), (-5.656634, -1.7032616, 3.5122006), (-5.9758306, -2.1438453, 2.080976), (-4.4168215, -3.6763065, 1.7371185), (-4.3961706, -3.676404, 1.7727776), (-4.328696, -3.6767225, 1.8892924), (-4.129722, -3.677662, 2.2328758), (-4.046571, -3.6780546, 2.3764596), (-3.806109, -3.67919, 2.7916842), (-3.2007647, -3.6820478, 3.8369806), (-12.649578, 1.7765152, -5.1911316), (-19.075455, 12.256225, -2.834468), (-13.824148, 8.781568, -15.497426), (-22.936886, 8.781568, -11.379415), (-9.753357, 1.7801418, -6.4891834), (-20.910412, 9.324285, -10.687958), (-13.060257, 10.381497, -3.0443928), (-10.3174095, 7.998171, -11.559072), (-21.088085, 9.165566, -11.077696), (-11.834188, 1.814692, -11.093849), (-13.170459, 8.052536, -14.050879), (-13.407036, 9.1569, -14.574399), (-20.959703, 9.165422, -11.136141), (-9.970284, 2.3959916, -6.9692225), (-21.02493, 9.221986, -10.9391575), (-12.372291, 4.4638996, -1.5053704), (-21.115059, 9.290563, -11.136861), (-17.399117, 10.765378, -2.9857712), (-17.628277, 12.256225, -3.4884427), (-16.650246, 5.893426, -1.3430866), (-9.45469, 2.3974907, -7.2011056), (-12.743202, 3.9911137, -2.335122), (-12.39328, -0.59535927, -12.331062), (-11.925004, 5.034039, -0.50476164), (-9.780304, 1.8566436, -6.548815), (-11.535229, 0.4191188, -10.432282), (-12.575069, 2.8792987, -1.9589999), (-17.644587, 2.8792987, 0.3318963), (-13.791167, 1.7750858, -4.679485), (-21.506016, -0.59535927, -8.21305), (-13.546314, 12.671005, -4.131733), (-17.435085, 13.905482, -3.0646675), (-8.5328665, 11.677888, -7.644593), (-8.063965, 12.644759, -6.6160355), (-8.336009, 13.905482, -7.2127776), (-12.363258, 7.0983787, -1.4851642), (-15.520764, 5.034039, 1.1344832), (-12.663384, 3.4633002, -2.1565652), (-16.35696, 3.9853957, -0.6997527), (-8.521931, 2.400203, -7.620604), (-10.427599, 7.770962, -11.8007765), (-12.015983, 9.290562, -15.284971), (-8.808238, 3.207104, -8.2486315), (-10.101663, 0.41911873, -11.08582), (-2.1191022, -5.780621, -11.342064), (-5.8398957, -7.8703713, -12.646287), (2.8037937, -8.070696, -9.616477), (7.5837545, -3.0814693, -18.537529), (9.218722, -3.305819, -17.964436), (4.7956367, -0.48898357, -16.703768), (7.588183, -2.1017556, -11.92078), (7.12886, -3.5038145, -12.2311945), (6.282554, -11.442127, -18.99363), (3.4768856, -0.26664427, -14.699233), (3.529882, -0.27557942, -14.779789), (6.0208373, -2.8670063, -19.085367), (6.2984376, -0.7423533, -18.988062), (0.83868444, 1.4700009, -20.90183), (-2.5319963, -7.8703713, -22.08333), (12.500071, 5.717402, -8.60128), (18.099405, 5.717402, -16.886656), (16.999823, -4.1941423, -17.629765), (11.400489, -4.1941423, -9.344388), (4.287985, 7.044538, -14.151085), (8.787736, -2.8670063, -23.17957), (9.887319, 7.044538, -22.43646), (-1.4239436, -7.1144094, -11.098395), (2.9746552, -11.442127, -9.556586), (-2.19635, -6.1454787, -11.369142), (-2.3568175, -6.9033995, -11.425389), (2.803793, -3.484746, -9.616477), (6.345336, -2.1017556, -8.375085), (2.803793, -3.778359, -9.616477), (2.8037927, -0.6666819, -9.616477), (3.6026583, -0.32278404, -14.614235), (-0.30676717, 0.70212823, -11.563565), (-0.73295265, 0.76644766, -10.856187), (-2.4692147, 1.4700009, -11.464787), (-7.380508, 0.9864232, 12.253043), (1.7305211, -3.9770136, 9.871573), (0.8637676, 6.643294, 13.419865), (-6.6539683, 21.252296, 5.492342), (-12.191488, 18.376413, 13.306764), (1.5051422, 21.252296, 11.2741165), (-4.9911966, 11.674756, 3.1458774), (-10.528716, 8.798872, 10.960299), (3.167914, 11.674756, 8.927651), (-4.0323772, 18.376413, 19.08854), (-2.6587338, 10.192013, 10.850823), (3.6183615, 1.9884394, 16.861004), (-4.8036957, 8.872296, 15.04423), (1.1870497, 6.546183, 14.595829), (-2.5778606, 9.998418, 17.035957), (-3.4596815, 9.994685, 11.08868), (-4.9488206, 8.798872, 14.91437), (-8.057719, 5.025624, 22.88579), (-10.904528, 5.025624, 13.299566), (-0.98448503, 9.518228, 14.787423), (-1.6945513, 10.862107, 15.789453), (0.21443677, 0.07255576, 14.76186), (-5.309544, -3.0944421, 11.638032), (-0.5445583, -15.51523, 12.281507), (4.875678, -15.51523, 20.685139), (1.2935107, -6.469243, 22.995592), (0.43831602, -5.3767843, 11.647565), (-4.375959, -1.3418766, -5.9058943), (6.1504426, -7.732119, -6.064758), (1.0559623, -7.69156, 1.0870186), (-1.3598711, -1.4036663, -10.749712), (1.6097304, -5.250448, 2.88887), (5.9995813, 0.83741146, -3.2799807), (4.414647, -2.8020582, -1.2583647), (5.3021035, -2.8202393, -2.683614), (7.2924256, 0.8382277, -5.352386), (5.3882194, 0.42883328, -1.4811212), (8.42637, 1.326585, 6.866945), (1.4999894, -7.731108, 1.3649621), (6.094635, -7.7321067, -5.9755983), (0.46491855, 2.5992095, -9.611403), (-0.567213, 2.8654218, -10.25525), (7.3788247, 2.1870365, -5.2984905), (6.3001304, 1.0941651, -5.9713826), (7.0557795, -2.8561664, -5.5000067), (4.773895, 0.8366377, -1.315228), (5.4810557, 0.7276368, -1.5061908), (-6.3518696, -7.031762, -3.5499933), (-5.985644, -1.3088995, -3.3207498), (-6.309093, -6.36331, -3.5232167), (-7.023388, -6.9033995, -3.9703372), (1.2569788, -9.041184, 1.2128469), (0.09450996, 2.8654218, -11.312381), (8.374877, 0.7276368, -6.129197), (6.562823, -9.041184, -7.2634726), (1.7288165, -3.9778922, 9.865267), (1.9474511, -3.8651962, 10.674192), (3.8492656, 3.857309, 16.771494), (0.5136039, -0.88060844, 13.46202), (1.898508, -3.8904243, 10.493108), (-0.21507065, 0.02463572, 13.549744), (0.76978624, 6.953546, 12.084741), (4.599162, 2.7420413, 16.480793), (2.5881164, -3.4578085, 13.212273), (5.239475, -3.1793044, 16.232574), (0.9033734, -4.910971, 11.3476095), (3.5693133, -3.6236682, 15.382919), (-0.0687675, -4.5916176, 13.532131), (4.872382, -3.3610175, 16.37488), (4.5676446, -0.76426274, -0.6623043), (6.560921, -2.2712605, 14.726156), (0.28565446, 7.1977305, 9.975862), (1.7328966, -3.975789, 9.8803625), (2.1233003, 6.424215, 17.440569), (-0.27364212, 10.862107, 20.574163), (0.50293756, 7.088138, 10.922347), (8.43888, 1.2779053, 7.0706635), (3.9896889, -1.6045961, -0.085586905), (8.351787, 1.6167978, 5.6524386), (1.6063038, -4.206898, 10.894228), (0.94189787, 6.8667374, 12.834459), (0.7988043, 6.9389105, 12.2111435), (6.1381354, -2.7344615, 15.884206), (6.6425204, -2.4847875, 15.688679), (0.80245024, 6.5962863, 13.427246), (0.00030191598, 7.704354, 13.523816), (3.8133247, -3.6649153, 15.922731), (-1.4083856, -5.1632915, 13.693405), (4.6249223, -3.4835117, 16.470808), (-4.126726, -6.4692426, 14.59196), (4.1451435, -3.7210054, 16.656796), (8.895425, -2.2066007, 18.092453), (1.9422053, -4.257682, 9.807643), (1.7540336, -4.0109563, 9.858458), (1.070573, 6.801837, 13.394968), (5.321341, 2.7420413, 18.912628), (1.2795274, 0.19138767, 17.76766), (-2.462736, -3.094442, 21.224255), (0.2165265, 0.07278891, 14.767757), (-3.7016656, -1.3556906, -6.988805), (-3.4077, 8.263634, -0.9862731), (-3.0572867, 5.015272, -1.7728314), (-1.8492447, 6.159725, -2.4686368), (-4.1020904, 0.17170857, -7.5083923), (-3.712565, 0.98814404, -6.6369996), (0.64376855, 7.7983193, 7.2890277), (0.086601146, 7.093366, 7.5050154), (0.001826605, 7.1874676, 7.5378785), (0.7919615, -6.0292997, 2.3787436), (0.123635046, 7.8206477, 13.508968), (-1.2577494, 6.308557, -1.1454251), (-1.8492447, 4.893615, -2.4686368), (-1.1627659, 6.3324566, -0.93294114), (-1.216611, 6.4980145, -0.6968606), (-2.8399653, 2.8170898, -4.6849403), (-1.0008571, 6.671813, -0.5707412), (-6.7547646, 7.770962, -13.442588), (-3.6400673, 2.9398606, -6.474818), (-1.8492447, 5.472158, -2.4686368), (-1.2330091, 6.5484333, -0.6249644), (-13.231476, 0.17170887, -3.4274206), (-3.7861035, 7.498463, -0.10020895), (-1.2731366, 6.671813, -0.4490282), (-10.130242, 6.6718135, 3.5102303), (-3.4224885, 8.233729, -0.9516445), (1.4474047, -7.7845864, 2.787611), (-7.013064, -7.031762, -2.490052), (-0.026145052, -5.4757056, 1.8684065), (1.0911855, -4.589808, 10.037454), (-0.25148633, 7.4686513, 7.636076), (-0.5296791, -5.1349754, 1.5543007), (-3.9488666, 5.1050596, -1.2593014), (-5.633702, 2.9398606, -3.2788801), (-12.782917, 14.271068, -2.4239652), (-3.6535316, 14.271067, -6.5049367), (-3.016215, 7.971689, -0.8877409), (4.918397, 2.1870365, -1.3542496), (-1.0816442, 2.9398606, -10.576153), (0.8519611, 8.061733, 7.208321), (-6.374326, 2.9398606, -2.0916061), (0.4762358, 2.5696306, -3.8080614), (0.46282956, -4.91674, 7.739809), (1.5382836, -5.5946603, 7.1203713), (0.635176, -4.7454443, 7.640541), (-4.0474153, 2.7552838, -1.2025396), (-1.805231, 2.6632633, -2.4939876), (-3.2383559, 2.7220798, -1.6685395), (-0.72323394, 2.6188576, -3.1171935), (-4.5162234, 2.774524, -0.9325166), (-4.5162234, 1.195727, -0.9325165), (-8.202189, 0.9825271, 4.439094), (-8.263251, 1.0394763, 4.446445), (-8.241875, 1.0195391, 4.4438715), (-2.8202393, -5.878428, 0.12544309), (-0.9597837, -5.772097, 3.5671926), (3.4831383, 2.263486, -0.96667004), (2.2507856, 2.4158027, -2.8030467), (2.2087696, 7.2174516, 6.6823497), (1.5164318, 7.082073, 5.210839), (0.060479745, 7.104233, 7.3731503), (0.45735496, 7.7458863, 6.7682395), (0.95151615, 7.9722395, 7.1697283), (1.2281977, 8.263634, 7.062472), (0.584286, 7.9511037, 6.5747733), (-1.0465422, 7.7892194, 4.069821), (-1.0134393, 7.8206477, 4.063915), (-0.1298483, 7.231201, 6.7866626), (-0.56917745, 7.524279, 5.4328885), (-0.90848273, 7.750631, 4.387334), (0.6527128, 8.061733, 6.4704785), (-4.5162234, 0.73281777, -0.93251646), (-4.5162234, -4.502105, -0.9325163), (1.2907896, -5.878428, 7.2629223), (1.2471795, -5.507472, 6.439139), (-0.2717775, -5.0525303, 2.8845243), (-2.537191, -5.7222958, 0.30200943), (-0.68171847, -4.9297495, 1.9251938), (-0.9530685, -4.8484774, 1.2901893), (1.3467457, -5.537293, 6.6721406), (-0.06636799, -5.1140523, 3.3652172), (-0.13601921, -5.093191, 3.2022216), (1.2696619, 2.537068, -4.265057), (0.24138656, 8.061733, 4.9472823), (1.4238389, 7.1532154, 5.1916995), (-1.5869792, 7.3732905, 0.4024725), (-1.237089, 7.020662, 0.3079876), (-0.9143075, 6.6953535, 0.22082315), (-1.4727069, 7.416318, 0.6865216), (1.3511238, 8.132483, 7.014819), (-0.82243645, 7.6611676, 2.3029137), (2.0469704, 3.7108955, -0.578845), (-0.17290716, 5.9481497, 0.020614235), (7.9609056, 1.671199, 4.4525156), (-1.2966037, 7.5518064, 4.1144357), (2.739903, -6.0292997, 9.592232), (8.462866, 1.1845714, 7.4612546), (-1.5342853, -6.313809, 3.6363559), (2.5534093, -3.7631445, 9.642592), (8.451528, 1.2286907, 7.2766204), (-1.6005893, -5.0527554, 12.962633), (2.3865733, 6.4135137, 5.3907003), (-1.3789755, 7.473601, 4.1291323), (-3.7851424, -5.3392367, -0.4764661), (6.3549337, 1.6167979, -1.7421741), (-1.026754, 8.061733, 0.2511884), (2.2119844, -4.257682, 10.5035715), (-2.906364, -5.8303013, 0.07171838), (-4.0274568, -5.2038307, -0.62762225), (-5.642209, 2.6598551, 11.736822), (-0.49718815, -6.313809, 12.250954), (11.8703785, 1.9197576, 13.662084), (6.740087, -7.7845864, -5.696936), (2.3183193, -4.136676, 1.9118237), (-4.194911, 6.6718135, 0.85704863), (-8.142517, 0.9268734, 4.43191), (-4.6774626, 9.694663, 11.450323), (-4.347325, 3.9064186, 11.352283), (-8.319516, 0.9864232, 4.4532185), (-5.7678065, -0.7850411, 11.774121), (2.4840188, 6.594607, 6.575649), (7.057356, -11.252587, 7.378368), (12.477592, -11.252587, 15.782), (-1.518688, -5.1463585, 12.909808), (-0.72831815, 7.390377, 10.277551), (-4.3323865, -2.3617716, 11.347846), (-3.8314865, -2.5562763, 13.985119), (8.498238, 1.046936, 8.037242), (2.4840188, 6.923785, 6.575649), (2.4961228, 9.783551, 6.5709567), (6.1105757, 9.783551, 15.89489), (8.255926, 1.9197577, 4.33815), (-9.807772, 1.215507, 2.1152968), (-4.5162234, -4.930706, -0.9325163), (8.439929, 1.2738214, 7.0877542), (4.1834273, -2.7580318, 10.307489), (6.5362115, -2.2066004, 14.434686), (-7.9704804, 1.215507, 5.3051615), (-6.216261, 5.3334, 0.046667054), (-1.4649003, -5.301, 3.6280026), (3.932755, -1.6873766, -0.028775), (4.3308034, -2.8003407, -1.1237123), (3.7775733, -3.7418358, -0.07025035), (5.9314218, -3.7418356, 9.695042), (-5.911164, 6.3359485, 2.0667133), (3.8538303, 6.257859, -0.087069586), (-5.987421, -3.6637466, 2.0835326), (-3.8335724, -3.6637464, 11.8488245)]
                }
            }
        }
    }
}

